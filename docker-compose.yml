version: "3.3"

services:
  bot:
    build:
        context: .
        dockerfile: Dockerfile
    container_name: bot
    restart: always
    env_file:
      - .env
    networks:
      - app
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy

  postgres:
    build:
      context: buildfiles
      dockerfile: postgres.dockerfile
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 3s
      retries: 5
    container_name: postgres
    restart: always
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
      - POSTGRES_DB=${DB_NAME}
      - PGDATA='/var/lib/postgresql/data/pgdata'
    networks:
      - app
    volumes:
      - postgres-data:/var/lib/postgresql/data

  pgbouncer:
    image: edoburu/pgbouncer
    container_name: pgbouncer
    restart: always
    env_file:
      - .env
    environment:
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASS}
      - DB_HOST=postgres
      - POOL_MODE=session
      - MAX_DB_CONNECTIONS=0
      - DEFAULT_POOL_SIZE=40
      - ADMIN_USERS=postgres,${DB_USER}
      - AUTH_TYPE=scram-sha-256
    ports:
      - "5432:5432"
    depends_on:
      - postgres
    networks:
      - app

  redis:
    build:
      context: buildfiles
      dockerfile: redis.dockerfile
    restart: on-failure
    container_name: redis
    env_file:
      - .env
    environment:
        - REDIS_PASS=${REDIS_PASS}
        - REDIS_HOST=${REDIS_HOST}
        - REDIS_PORT=${REDIS_PORT}
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    healthcheck:
      test: [ "CMD", "redis-cli", "AUTH", "$REDIS_PASS", "ping"]
      interval: 3s
      retries: 5
    networks:
      - app
    volumes:
      - redis-data:/bitnami/redis/data
    depends_on:
      - postgres

  scheduler:
    build:
        context: .
        dockerfile: buildfiles/scheduler.dockerfile
    container_name: scheduler
    restart: always
    env_file:
      - .env
    networks:
      - app
    depends_on:
        - postgres
        - redis


networks:
  app:
    driver: bridge

volumes:
  postgres-data: {}
  redis-data: {}
